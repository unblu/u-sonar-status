var documents = [

{
    "id": 0,
    "uri": "documentation/10_user-guide.html",
    "menu": "documentation",
    "title": "User Guide",
    "text": " Table of Contents User guide User guide u-sonar-status is a bot to report a SonarQube (or SonarCloud) Pull Request Quality Gate Status  as  External Status Check  on Merge Requests in GitLab Ultimate. On a MR where the tool is configured, you will see next to the comment posted by sonar, the quality gate reported as external status: If your project is configured to not allow you to merge when external checks are failing, you will ensure that the quality gate has to be green before you merge. The recommended approach (see the GitLab integration integration page) is to fail a CI pipeline in case of a Failed quality gate. But this requires to re-run this pipeline when the status has changed in Sonar (for example when some findings are marked as false positives). With this tool the external status check in Gitlab and the Quality Gate status in Sonar are always in sync. "
},

{
    "id": 1,
    "uri": "documentation/50_build.html",
    "menu": "documentation",
    "title": "Build",
    "text": " Table of Contents Build Running the application locally Packaging the application Build a docker image Run the docker image Build Please refer to the Quarkus documentation for more details. Running the application locally You can run your application in dev mode that enables live coding using: ./gradlew --console=PLAIN quarkusDev Be sure to have set the configurations correctly as described in the configuration page. Example: export GITLAB_HOST=https://gitlab.com export GITLAB_API_TOKEN=glpat-rXzx1n17cqUnmo437XSf export GITLAB_EXTERNAL_CHECK_URL=https://32e2-2a01-e0a-19d-8b20-ed94-7739-83db-7f87.eu.ngrok.io/u-sonar-status/gitlab export GITLAB_EXTERNAL_CHECK_NAME=SONAR_local export SONARQUBE_HOST=https://sonarcloud.io/ export SONARQUBE_API_TOKEN=3bd9fdc773d5a6df3d2a12f8c35ae2b3e13b8944 This will start the application is dev mode, available on port 8080 . For more details check the Quarkus Gradle Tooling page. Packaging the application The application can be packaged using: ./gradlew build It produces the quarkus-run.jar file in the build/quarkus-app/ directory. Be aware that it’s not an über-jar as the dependencies are copied into the build/quarkus-app/lib/ directory. The application is now runnable using java -jar build/quarkus-app/quarkus-run.jar . If you want to build an über-jar , execute the following command: ./gradlew build -Dquarkus.package.type=uber-jar The application, packaged as an über-jar , is now runnable using java -jar build/u-sonar-status-&lt;version&gt;-runner.jar . Build a docker image ./gradlew build \ -Dquarkus.container-image.build=true \ -Dquarkus.container-image.push=true \ -Dquarkus.container-image.registry=&lt;registry name&gt; \ -Dquarkus.container-image.group=&lt;image path&gt; \ -Dquarkus.container-image.name=&lt;image name&gt; \ -Dquarkus.container-image.username=&lt;registry username&gt; \ -Dquarkus.container-image.password=&lt;registry password&gt; Run the docker image docker run -p 8080:8080 -e GITLAB_API_TOKEN=glpat-rXzx1n17cqUnmo437XSf &lt;u-sonar-status image name&gt; The server is running on the 8080 port. "
},

{
    "id": 2,
    "uri": "documentation/30_configuration.html",
    "menu": "documentation",
    "title": "Configuration",
    "text": " Table of Contents Configuration SonarQube host SonarQube API token SonarQube Webhook secret GitLab host GitLab API token GitLab External Check URL GitLab External Check name Quality Gate Bypass - branch pattern Configuration Some configurations are available for u-sonar-status : Example application.properties file gitlab.host=https://gitlab.com gitlab.api.token=glpat-rXzx1n17cqUnmo437XSf gitlab.external.check.url=https://company.example.com/u-sonar-status/gitlab gitlab.external.check.name=SONAR sonarqube.host=https://sonarcloud.io/ sonarqube.api.token=3bd9fdc773d5a6df3d2a12f8c35ae2b3e13b8944 branch.bypass=^mr(\\d+)_.+ You can use any of the Configuration Sources supported by Quarkus to set the values. For example you can use following system property to set the gitlab.api.token value: Setting gitlab.api.token using a system property: export GITLAB_API_TOKEN=glpat-rXzx1n17cqUnmo437XSf SonarQube host Specify the location of the GitLab server: key: sonarqube.host default value https://sonarcloud.io/ SonarQube API token Specify the api token value used when u-sonar-status is performing REST calls against SonarQube. key: sonarqube.api.token No default value. Mandatory for the application to start SonarQube Webhook secret key: sonarqube.webhook.secret No default value. Mandatory only if you have set a secret when you have registered the SonarQube Webhook (the value has to be the same) GitLab host Specify the location of the GitLab server: key: gitlab.host default value https://gitlab.com GitLab API token Specify the api token value used when u-sonar-status is performing REST calls against GitLab. key: gitlab.api.token No default value. Mandatory for the application to start GitLab External Check URL Specify the URL where GitLab should send the webhook event (see Example payload sent to external service ). So it points to the non-blocking or blocking GitLab endpoints of the u-sonar-status tool. The URL has to be accessible for GitLab. key: gitlab.external.check.url No default value. Mandatory for the application to start GitLab External Check name Specify the name of the check in Gitlab. key: gitlab.external.check.name default value: SONAR Quality Gate Bypass - branch pattern Specify the regex pattern of branches where the Quality Gate must be bypassed. If the source branch name matches the given pattern, Gitlab&#8217;s external status check is automatically set to green, without the need to query Sonar. key: branch.bypass No default value "
},

{
    "id": 3,
    "uri": "documentation/40_endpoints.html",
    "menu": "documentation",
    "title": "Endpoints",
    "text": " Table of Contents Endpoints Sonar endpoints GitLab endpoints Readiness and liveness probes Endpoints The tool needs to be contacted from both SonarQube and GitLab. Sonar endpoints Sonar main endpoint POST &lt;server url&gt;/u-sonar-status/sonar This is the principal endpoint that receives a Webhook event sent by SonarQube. Requests are processed asynchronously, meaning that SonarQube will receive a 202 Accepted response back immediately. Example: { build_commit : 6af21ad, build_timestamp : 2022-01-01T07:21:58.378413Z, sonar_event_uuid : sonar-c9961b21-8554-4df8-8485-1aacd05b6ac4, source : SONAR } build_commit and build_timestamp allow you to identify the u-sonar-status version. sonar_event_uuid is a value used to identify the request. Sonar blocking endpoint A secondary endpoint where the process in done in a blocking way is available as well: POST &lt;server url&gt;/u-sonar-status/sonar-blocking With this blocking endpoint you get more information about the created comment in the returned response. Example: { build_commit : 6af21ad, build_timestamp : 2022-01-01T07:21:58.378413Z, sonar_event_uuid : sonar-c9961b21-8554-4df8-8485-1aacd05b6ac4, sonar_task_id : AYbMZT8ngxz2HxwOGdhr, source : SONAR, gitlab_project_id : 56, gitlab_merge_request_iid : 19, gitlab_external_status_check_id : 3, gitlab_external_status_check_status_id : 4 } Using this endpoint might be interesting for debugging purposes, since you see the response containing the details of the action. Sonar replay endpoint An additional endpoint is available to trigger the process using some simplified input compared to the event sent by the Sonar Webhook mechanism. POST &lt;server url&gt;/u-sonar-status/sonar-replay Body: { sonar_event_uuid : sonar-c9961b21-8554-4df8-8485-1aacd05b6ac4, task_id : AYbMZT8ngxz2HxwOGdhr, revision : ba22a8ce46acee878adec5ffee5a5621c9d35ac1, project_key : project_56, branch_name : 100, branch_type : PULL_REQUEST, quality_gate_status : OK } The response is the same as in the blocking case. Using this endpoint is interesting to trigger again the u-sonar-status action for a given event using curl , without having to send the complete webhook event body. GitLab endpoints GitLab main endpoint POST &lt;server url&gt;/u-gitlab-status/gitlab This is to receive the external check payload (see Example payload sent to external service ) sent by GitLab. Requests are processed asynchronously, meaning that GitLab will receive a 202 Accepted response back immediately. Example: { build_commit : 6af21ad, build_timestamp : 2022-01-01T07:21:58.378413Z, gitlab_event_uuid : gitlab-c289ee78-ab41-4656-ad7a-3d8ea464fb25, source : GITLAB } build_commit and build_timestamp allow you to identify the u-gitlab-status version. gitlab_event_uuid is a value used to identify the request. GitLab blocking endpoint A secondary endpoint where the process in done in a blocking way is available as well: POST &lt;server url&gt;/u-gitlab-status/gitlab-blocking With this blocking endpoint you get more information about the created comment in the returned response. Example: { build_commit : 6af21ad, build_timestamp : 2022-01-01T07:21:58.378413Z, gitlab_event_uuid : gitlab-c289ee78-ab41-4656-ad7a-3d8ea464fb25, source : GITLAB, gitlab_project_id : 56, gitlab_merge_request_iid : 19, gitlab_external_status_check_id : 3, gitlab_external_status_check_status_id : 4 } Using this endpoint might be interesting for debugging purposes, since you see the response containing the details of the action. GitLab replay endpoint An additional endpoint is available to trigger the process using some simplified input compared to the event sent by the GitLab Webhook mechanism. POST &lt;server url&gt;/u-gitlab-status/gitlab-replay Body: { project_id : 56, merge_request_iid : 100, merge_request_source_branch : patch-2, merge_request_last_commit_sha : ba22a8ce46acee878adec5ffee5a5621c9d35ac1, external_status_check_id : 3, external_status_check_name : SONAR, external_status_check_url : https://company.example.com/u-sonar-status/gitlab, gitlab_event_uuid : gitlab-c289ee78-ab41-4656-ad7a-3d8ea464fb25 } The response is the same as in the blocking case. Using this endpoint is interesting to trigger again the u-gitlab-status action for a given event using curl , without having to send the complete webhook event body. Readiness and liveness probes The application provides standard probes: &lt;server url&gt;/q/health/live : The application is up and running (liveness). &lt;server url&gt;/q/health/ready : The application is ready to serve requests (readiness). &lt;server url&gt;/q/health : Accumulating all health check procedures in the application. "
},

{
    "id": 4,
    "uri": "documentation/20_setup.html",
    "menu": "documentation",
    "title": "Setup",
    "text": " Table of Contents Setup Pre-requisite GitLab: Generate an API Token Sonar: Generate an API Token Application Setup SonarQube: Webhook Setup GitLab Dev setup Working with remote instances Setup In order to interact with a given Gitlab instance through its REST API, u-sonar-status needs to be authorised and authenticated. To do so, together with Gitlab&#8217;s instance URL, an API token must be provided. Pre-requisite The key of the project in Sonar has to be: project_&lt;project id&gt; (example project_56 ) You can access the GitLab project with: &lt;gitlab server&gt;/projects/56 (redirects you to the project page) You can access the Sonar project with: &lt;sonar server&gt;/dashboard?id=project_56 GitLab: Generate an API Token You will need a personal access token or a group access in order for the tool to interact with your repositories on GitLab. All the actions are done using the REST API of GitLab. You will need the api scope and a role allowed to post external status check (probably Maintainer ). Sonar: Generate an API Token See documentation: Generating and using tokens Application Setup Depending on your setup you might need to set some configuration properties. Minimal config entries: sonarqube.api.token gitlab.api.token gitlab.external.check.url Optional config entries: branch.bypass And if you are on prem GitLab and Sonar servers: sonarqube.host gitlab.host SonarQube: Webhook Setup In SonarQube you need to configure a webhook Webhook pointing to the location where u-sonar-status is available: Name: Any name so that you recognize that the webhook was created for the u-sonar-status tool. URL: &lt;server url&gt;/u-sonar-status/sonar (you decide to point to the non-blocking or blocking endpoint) Secret: &lt;any value&gt; if you set a value, you will need to configure sonarqube.webhook.secret GitLab As soon as the tool receives the first Sonar webhook, it will auto register the external status check. You will see it under Settings &gt; Merge requests of each project: See the GitLab doc View the status checks on a project Dev setup The application can be started locally, check local build section. Working with remote instances If you are working locally with a remote sonarqube or gitlab instance (like https://sonarcloud.io/ or https://gitlab.com/ ), adding some proxy might be useful: With a tool like ngrok you will get a public url (something like https://2a01-8943-19d-e0a-8b20-645f-f7a2-c2d-9be1.ngrok.io ) that points to your localhost computer. start ngrok (assuming u-sonar-status is running locally on port 8080) ngrok http 8080 With a tool like mitmproxy you can proxy the remote instance to capture the REST requests made by u-sonar-status to the remote instance. For SonarQube: start mitmproxy mitmproxy -p 8881 --mode reverse:https://sonarcloud.io And then make u-sonar-status use localhost:8881 instead of sonarcloud.io directly: use mitmproxy export SONARQUBE_HOST=http://localhost:8881 For GitLab: start mitmproxy mitmproxy -p 8882 --mode reverse:https://gitlab.com And then make u-sonar-status use localhost:8882 instead of gitlab.com directly: use mitmproxy export GITLAB_HOST=http://localhost:8882 "
},

{
    "id": 5,
    "uri": "documentation/60_known-issues.html",
    "menu": "documentation",
    "title": "Known issues",
    "text": " Table of Contents Known issues Retry button is not working in GitLab Known issues Retry button is not working in GitLab When an on prem sonar server is user (instead of sonarcloud.io), the endpoint api/project_pull_requests/list that is queried does not contains the commit information. In the u-sonar-satus tool you will see following log entry: Skipping event because head of merge request '100' in project '56' is 'ba22a8ce46acee878adec5ffee5a5621c9d35ac1' and does not match the revision in Sonar 'null' related discussion on the sonarsource forum "
},

{
    "id": 6,
    "uri": "search.html",
    "menu": "-",
    "title": "search",
    "text": " Search Results "
},

{
    "id": 7,
    "uri": "lunrjsindex.html",
    "menu": "-",
    "title": "null",
    "text": " will be replaced by the index "
},

];
